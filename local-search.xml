<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hi</title>
    <link href="/2024/02/06/hi/"/>
    <url>/2024/02/06/hi/</url>
    
    <content type="html"><![CDATA[<h1 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h1><h2 id="hnkjhnkjnbkjbjhvb-jb-jhb-kjn"><a href="#hnkjhnkjnbkjbjhvb-jb-jhb-kjn" class="headerlink" title="hnkjhnkjnbkjbjhvb jb jhb kjn;"></a>hnkjhnkjnbkjbjhvb jb jhb kjn;</h2><p><strong>wello</strong></p><p><em>capybara</em></p><p><del>wow</del></p><ul><li>c9</li><li>c10</li></ul><ol><li>xskmnald</li><li>2mklnmcas</li></ol><p>&#96;<br>#include &lt;bits&#x2F;stdc++.h&gt;<br>#define Weakoying ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);<br>#define int long long<br>#define pii pair&lt;int, int&gt;<br>#define vi vector<int><br>#define vii vector&lt;pair&lt;int, int&gt;&gt;<br>#define pqueue priority_queue<br>#define pb push_back<br>#define F first<br>#define S second<br>#define max(a, b) (a &gt; b ? a : b)<br>#define min(a, b) (a &lt; b ? a : b)<br>#define cmax(a, b) a &#x3D; (a &gt; b ? a : b)<br>#define cmin(a, b) a &#x3D; (a &lt; b ? a : b)<br>#define put(x) cout &lt;&lt; x &lt;&lt; endl;<br>#define DB(x) cerr &lt;&lt; #x &lt;&lt; “ “ &lt;&lt; x &lt;&lt; endl<br>#define all(v) v.begin(), v.end()<br>#define stop system(“pause”);<br>#define MEM(x, n) memset(x, n, sizeof(x));<br>#define lowbit(x) x &amp;(-x)<br>#define SZ(v) ((int)v.size())<br>#if !LOCAL<br>#define endl “\n”<br>#pragma GCC optimize(“Ofast”, “unroll-all-loops”)<br>#endif<br>const int INF &#x3D; 0x3f3f3f3f3f3f3f3f;<br>const int P &#x3D; 1e9+7;</p><p>using namespace std;<br>&#x2F;******************************************************************************&#x2F;<br>#define MAXN 200005<br>#define MAXM 1000005<br>int n, m;<br>vector<int> G[MAXN];</p><p>int rev(int i) {<br>    return (i + m) % (m * 2);<br>}</p><p>struct Tarjan {<br>    int tt, sccId;<br>    int dep[MAXN], low[MAXN], scc[MAXN];<br>    int opp[MAXN];<br>    bitset<MAXN> inSt;<br>    stack<int> st;</p><pre><code>void dfs(int i, int pa) &#123;    dep[i] = low[i] = ++tt;    st.push(i);    inSt[i] = true;    for (int e: G[i]) &#123;        if (!dep[e]) &#123;            dfs(e, i);            cmin(low[i], low[e]);        &#125;        else if (inSt[e]) &#123;            cmin(low[i], dep[e]);        &#125;    &#125;    if (low[i] == dep[i]) &#123;        int p;        sccId++;        do &#123;            p = st.top();            st.pop();            inSt[p] = false;            scc[p] = sccId;        &#125; while (p != i);    &#125;&#125;void main() &#123;    for (int i = 0; i &lt; 2 * m; i++) &#123;        if (!dep[i])            dfs(i, i);    &#125;&#125;bool check() &#123;    for (int i = 0; i &lt; m; i++) &#123;        if (scc[i] == scc[rev(i)])            return false;        opp[scc[i]] = scc[rev(i)];        opp[scc[rev(i)]] = scc[i];    &#125;    return true;&#125;</code></pre><p>} Tarjan;</p><p>struct Solver {<br>    vector<int> G2[MAXN];<br>    int in[MAXN];<br>    int ans[MAXN];</p><pre><code>void build() &#123;    for (int i = 0; i &lt; 2 * m; i++) &#123;        for (int e: G[i]) if (Tarjan.scc[i] != Tarjan.scc[e]) &#123;            G2[Tarjan.scc[e]].pb(Tarjan.scc[i]);            in[Tarjan.scc[i]]++;        &#125;    &#125;&#125;void topo() &#123;    queue&lt;int&gt; q;    for (int i = 1; i &lt;= Tarjan.sccId; i++) &#123;        if (!in[i])            q.push(i);    &#125;    while (q.size()) &#123;        auto now = q.front();        q.pop();        if (!ans[now]) &#123;            ans[now] = 1;            ans[Tarjan.opp[now]] = 2;        &#125;        for (int e: G2[now]) &#123;            in[e]--;            if (!in[e])                q.push(e);        &#125;    &#125;    for (int i = 0; i &lt; m; i++)        cout &lt;&lt; (ans[Tarjan.scc[i]] == 1 ? &quot;+ &quot; : &quot;- &quot;);    cout &lt;&lt; endl;&#125;</code></pre><p>} Solver;</p><p>void sol() {<br>    cin &gt;&gt; n &gt;&gt; m;</p><pre><code>for (int i = 0; i &lt; n; i++) &#123;    char c1, c2;    int a1, a2;    cin &gt;&gt; c1 &gt;&gt; a1 &gt;&gt; c2 &gt;&gt; a2;    a1--, a2--;    if (c1 == &#39;-&#39;)        a1 += m;    if (c2 == &#39;-&#39;)        a2 += m;    G[rev(a1)].pb(a2);    G[rev(a2)].pb(a1);&#125;Tarjan.main();if (!Tarjan.check()) &#123;    cout &lt;&lt; &quot;IMPOSSIBLE&quot; &lt;&lt; endl;    return;&#125;Solver.build();Solver.topo();</code></pre><p>}</p><p>signed main() {<br>    Weakoying;<br>    int t &#x3D; 1;<br>    &#x2F;&#x2F;while (cin &gt;&gt; t)<br>    {<br>        while (t–) {<br>            sol();<br>        }<br>    }</p><pre><code>return 0;</code></pre><p>}<br>&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define Weakoying ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);</span><br><span class="line">#define int long long</span><br><span class="line">#define pii pair&lt;int, int&gt;</span><br><span class="line">#define vi vector&lt;int&gt;</span><br><span class="line">#define vii vector&lt;pair&lt;int, int&gt;&gt;</span><br><span class="line">#define pqueue priority_queue</span><br><span class="line">#define pb push_back</span><br><span class="line">#define F first</span><br><span class="line">#define S second</span><br><span class="line">#define max(a, b) (a &gt; b ? a : b)</span><br><span class="line">#define min(a, b) (a &lt; b ? a : b)</span><br><span class="line">#define cmax(a, b) a = (a &gt; b ? a : b)</span><br><span class="line">#define cmin(a, b) a = (a &lt; b ? a : b)</span><br><span class="line">#define put(x) cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">#define DB(x) cerr &lt;&lt; #x &lt;&lt; &quot; &quot; &lt;&lt; x &lt;&lt; endl</span><br><span class="line">#define all(v) v.begin(), v.end()</span><br><span class="line">#define stop system(&quot;pause&quot;);</span><br><span class="line">#define MEM(x, n) memset(x, n, sizeof(x));</span><br><span class="line">#define lowbit(x) x &amp;(-x)</span><br><span class="line">#define SZ(v) ((int)v.size())</span><br><span class="line">#if !LOCAL</span><br><span class="line">#define endl &quot;\n&quot;</span><br><span class="line">#pragma GCC optimize(&quot;Ofast&quot;, &quot;unroll-all-loops&quot;)</span><br><span class="line">#endif</span><br><span class="line">const int INF = 0x3f3f3f3f3f3f3f3f;</span><br><span class="line">const int P = 1e9+7;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">/******************************************************************************/</span><br><span class="line">#define MAXN 200005</span><br><span class="line">#define MAXM 1000005 </span><br><span class="line">int n, m;</span><br><span class="line">vector&lt;int&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line">int rev(int i) &#123;</span><br><span class="line">    return (i + m) % (m * 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Tarjan &#123;</span><br><span class="line">    int tt, sccId;</span><br><span class="line">    int dep[MAXN], low[MAXN], scc[MAXN];</span><br><span class="line">    int opp[MAXN];</span><br><span class="line">    bitset&lt;MAXN&gt; inSt;</span><br><span class="line">    stack&lt;int&gt; st;</span><br><span class="line"></span><br><span class="line">    void dfs(int i, int pa) &#123;</span><br><span class="line">        dep[i] = low[i] = ++tt;</span><br><span class="line">        st.push(i);</span><br><span class="line">        inSt[i] = true;</span><br><span class="line"></span><br><span class="line">        for (int e: G[i]) &#123;</span><br><span class="line">            if (!dep[e]) &#123;</span><br><span class="line">                dfs(e, i);</span><br><span class="line">                cmin(low[i], low[e]);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (inSt[e]) &#123;</span><br><span class="line">                cmin(low[i], dep[e]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (low[i] == dep[i]) &#123;</span><br><span class="line">            int p;</span><br><span class="line">            sccId++;</span><br><span class="line">            do &#123;</span><br><span class="line">                p = st.top();</span><br><span class="line">                st.pop();</span><br><span class="line">                inSt[p] = false;</span><br><span class="line">                scc[p] = sccId;</span><br><span class="line">            &#125; while (p != i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void main() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 2 * m; i++) &#123;</span><br><span class="line">            if (!dep[i])</span><br><span class="line">                dfs(i, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool check() &#123;</span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            if (scc[i] == scc[rev(i)])</span><br><span class="line">                return false;</span><br><span class="line">            opp[scc[i]] = scc[rev(i)];</span><br><span class="line">            opp[scc[rev(i)]] = scc[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Tarjan;</span><br><span class="line"></span><br><span class="line">struct Solver &#123;</span><br><span class="line">    vector&lt;int&gt; G2[MAXN];</span><br><span class="line">    int in[MAXN];</span><br><span class="line">    int ans[MAXN];</span><br><span class="line"></span><br><span class="line">    void build() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 2 * m; i++) &#123;</span><br><span class="line">            for (int e: G[i]) if (Tarjan.scc[i] != Tarjan.scc[e]) &#123;</span><br><span class="line">                G2[Tarjan.scc[e]].pb(Tarjan.scc[i]);</span><br><span class="line">                in[Tarjan.scc[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void topo() &#123;</span><br><span class="line">        queue&lt;int&gt; q;</span><br><span class="line">        for (int i = 1; i &lt;= Tarjan.sccId; i++) &#123;</span><br><span class="line">            if (!in[i])</span><br><span class="line">                q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (q.size()) &#123;</span><br><span class="line">            auto now = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line"></span><br><span class="line">            if (!ans[now]) &#123;</span><br><span class="line">                ans[now] = 1;</span><br><span class="line">                ans[Tarjan.opp[now]] = 2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            for (int e: G2[now]) &#123;</span><br><span class="line">                in[e]--;</span><br><span class="line">                if (!in[e])</span><br><span class="line">                    q.push(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; m; i++)</span><br><span class="line">            cout &lt;&lt; (ans[Tarjan.scc[i]] == 1 ? &quot;+ &quot; : &quot;- &quot;);</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Solver;</span><br><span class="line"></span><br><span class="line">void sol() &#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        char c1, c2;</span><br><span class="line">        int a1, a2;</span><br><span class="line">        cin &gt;&gt; c1 &gt;&gt; a1 &gt;&gt; c2 &gt;&gt; a2;</span><br><span class="line">        a1--, a2--;</span><br><span class="line">        if (c1 == &#x27;-&#x27;)</span><br><span class="line">            a1 += m;</span><br><span class="line">        if (c2 == &#x27;-&#x27;)</span><br><span class="line">            a2 += m;</span><br><span class="line"></span><br><span class="line">        G[rev(a1)].pb(a2);</span><br><span class="line">        G[rev(a2)].pb(a1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Tarjan.main();</span><br><span class="line">    if (!Tarjan.check()) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;IMPOSSIBLE&quot; &lt;&lt; endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Solver.build();</span><br><span class="line">    Solver.topo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signed main() &#123;</span><br><span class="line">    Weakoying;</span><br><span class="line">    int t = 1;</span><br><span class="line">    //while (cin &gt;&gt; t)</span><br><span class="line">&#123;</span><br><span class="line">    while (t--) &#123;</span><br><span class="line">            sol();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sadasdasdadsadasdsad</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/05/hello-world/"/>
    <url>/2024/02/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
